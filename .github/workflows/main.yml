# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  run-sonarqube-scan:
    name: Run SonarQube Scan
#     runs-on: [self-hosted, onprem]
    runs-on: [ubuntu-latest]
    steps:
    - uses: actions/checkout@v2.2.0
      with:
        # Disabling shallow clone is recommended for improving relevancy of sonarqube reporting
        fetch-depth: 0
    - name: Setup dotnet
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.0.x'
    - name: Install dependencies
      run: dotnet restore
    - name: Sonarqube Scan
      run: |
        dotnet tool install --global dotnet-sonarscanner
        dotnet sonarscanner begin /k:${{ secrets.SONAR_PROJECT_KEY }} /o:${{ secrets.SONAR_ORG }} /d:sonar.host.url=${{ secrets.SONAR_HOST_URL }} /d:sonar.login=${{ secrets.SONAR_LOGIN_TOKEN }} /d:sonar.qualitygate.wait=true /d:sonar.cs.vstest.reportsPaths="**/*.trx" /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml"
        dotnet build
        dotnet test --settings coverlet.runsettings --logger:trx
        dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_LOGIN_TOKEN }}"
      env:
        ASPNETCORE_ENVIRONMENT: Development
